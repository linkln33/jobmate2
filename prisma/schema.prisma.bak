// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core Models

model User {
  id                   String    @id @default(uuid())
  email                String    @unique
  passwordHash         String
  role                 UserRole  @default(CUSTOMER)
  firstName            String
  lastName             String
  phone                String?
  profileImageUrl      String?
  dateOfBirth          DateTime?
  bio                  String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  lastLogin            DateTime?
  isVerified           Boolean   @default(false)
  isActive             Boolean   @default(true)
  emailVerified        Boolean   @default(false)
  phoneVerified        Boolean   @default(false)
  twoFactorEnabled     Boolean   @default(false)
  notificationPreferences Json?

  // Relations
  customerProfile      CustomerProfile?
  specialistProfile    SpecialistProfile?
  jobsAsCustomer       Job[]               @relation("CustomerJobs")
  jobsAsSpecialist     Job[]               @relation("SpecialistJobs")
  sentMessages         Message[]           @relation("SentMessages")
  receivedMessages     Message[]           @relation("ReceivedMessages")
  wallet               Wallet?
  reviews              Review[]            @relation("UserReviews")
  reviewsGiven         Review[]            @relation("ReviewsGiven")
  notifications        Notification[]
  devices              UserDevice[]
  searchHistory        SearchHistory[]
  preferences          UserPreference?
  badges               UserBadge[]
  guildMemberships     GuildMember[]
  foundedGuilds        Guild[]
  jobProposals         JobProposal[]
  disputesOpened       Dispute[]           @relation("DisputeOpener")
  disputesResolved     Dispute[]           @relation("DisputeResolver")
  disputeMessages      DisputeMessage[]
  skills               UserSkill[]
  skillEndorsementsGiven SkillEndorsement[] @relation("EndorserRelation")
  socialLinks          UserSocialLink[]
  portfolioItems       PortfolioItem[]
}

enum UserRole {
  CUSTOMER
  SPECIALIST
  ADMIN
}

model CustomerProfile {
  id                    String   @id @default(uuid())
  userId                String   @unique
  address               String?
  city                  String?
  state                 String?
  zipCode               String?
  country               String?
  latitude              Float?
  longitude             Float?
  preferredCommunication String?
  savedPaymentMethods   Json?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SpecialistProfile {
  id                    String   @id @default(uuid())
  userId                String   @unique
  businessName          String?
  businessDescription   String?
  tagline               String?  // Short professional tagline
  yearsOfExperience     Int?
  
  // Location information
  address               String?
  city                  String?
  state                 String?
  zipCode               String?
  country               String?
  latitude              Float?
  longitude             Float?
  serviceRadius         Int?     // in kilometers
  travelWillingness     Boolean  @default(false) // Willing to travel beyond service radius
  
  // Availability and status
  availabilityStatus    String   @default("offline") // "online", "offline", "busy"
  responseTime          Int?     // Average response time in minutes
  avgDeliveryTime       Int?     // Average delivery time in hours
  
  // Business details
  businessLicense       String?  // Business license number
  insuranceInfo         String?  // Insurance details
  hourlyRate            Decimal? @db.Decimal(10, 2)
  minimumJobPrice       Decimal? @db.Decimal(10, 2)
  currency              String   @default("USD")
  acceptsDigitalPayment Boolean  @default(true)
  
  // Profile visibility and features
  isProfileComplete     Boolean  @default(false)
  isFeatured            Boolean  @default(false)
  isBackgroundChecked   Boolean  @default(false)
  isIdentityVerified    Boolean  @default(false)
  isLicenseVerified     Boolean  @default(false)
  isInsuranceVerified   Boolean  @default(false)
  
  // Performance metrics
  averageRating         Decimal? @db.Decimal(3, 2)
  positiveReviewPercentage Decimal? @db.Decimal(5, 2) // Percentage of positive reviews
  totalReviews          Int      @default(0)
  totalJobsCompleted    Int      @default(0)
  completionRate        Decimal? @db.Decimal(5, 2) // Percentage of jobs completed
  cancellationRate      Decimal? @db.Decimal(5, 2) // Percentage of jobs cancelled
  
  // Additional profile information
  languages             String[] // Languages spoken
  education             Json?    // Array of education details
  workHistory           Json?    // Array of work history
  preferredJobTypes     String[] // Types of jobs preferred
  preferredJobSizes     String[] // Small, medium, large jobs
  emergencyAvailable    Boolean  @default(false) // Available for emergency jobs
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  services              SpecialistService[]
  locations           SpecialistLocation[]
  availability        SpecialistAvailability[]
  certifications      SpecialistCertification[]
}

model SpecialistService {
  id                String   @id @default(uuid())
  specialistId      String
  serviceCategoryId String
  priceType         String   // "hourly", "fixed", "quote"
  basePrice         Decimal? @db.Decimal(10, 2)
  description       String?
  isPrimary         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  specialist        SpecialistProfile @relation(fields: [specialistId], references: [id], onDelete: Cascade)
  serviceCategory   ServiceCategory   @relation(fields: [serviceCategoryId], references: [id])
}

model SpecialistLocation {
  id           String   @id @default(uuid())
  specialistId String
  latitude     Float
  longitude    Float
  status       String   // "on_duty", "off_duty", "on_job"
  heading      Float?   // direction in degrees
  accuracy     Float?   // accuracy in meters
  createdAt    DateTime @default(now())

  // Relations
  specialist   SpecialistProfile @relation(fields: [specialistId], references: [id], onDelete: Cascade)
}

model SpecialistAvailability {
  id           String   @id @default(uuid())
  specialistId String
  dayOfWeek    Int      // 0 = Sunday, 6 = Saturday
  startTime    String   // Format: "HH:MM"
  endTime      String   // Format: "HH:MM"
  isAvailable  Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  specialist   SpecialistProfile @relation(fields: [specialistId], references: [id], onDelete: Cascade)
}

model SpecialistCertification {
  id                  String   @id @default(uuid())
  specialistId        String
  certificationName   String
  issuingOrganization String
  issueDate           DateTime
  expiryDate          DateTime?
  verificationStatus  String   // "pending", "verified", "rejected"
  certificateUrl      String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  specialist          SpecialistProfile @relation(fields: [specialistId], references: [id], onDelete: Cascade)
}

model ServiceCategory {
  id                String   @id @default(cuid())
  name              String
  slug              String?  @unique
  description       String?
  iconUrl           String?
  coverImageUrl     String?
  emoji             String?
  color             String?
  parentCategoryId  String?
  parentCategory    ServiceCategory?  @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  childCategories   ServiceCategory[] @relation("CategoryHierarchy")
  displayOrder      Int     @default(0)
  isPopular         Boolean @default(false)
  isActive          Boolean @default(true)
  metaTags          String[]
  jobs              Job[]
  specialistServices SpecialistService[]
  skills            Skill[]
  portfolioItems    PortfolioItem[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// New model for skills with endorsements
model Skill {
  id                String   @id @default(uuid())
  name              String
  description       String?
  iconUrl           String?
  serviceCategoryId String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  serviceCategory   ServiceCategory? @relation(fields: [serviceCategoryId], references: [id])
  userSkills        UserSkill[]
}

// Junction model for users and skills with endorsements
model UserSkill {
  id                String   @id @default(uuid())
  userId            String
  skillId           String
  proficiencyLevel  Int?     @default(1) // 1-5 scale
  yearsExperience   Decimal? @db.Decimal(4, 1)
  isVerified        Boolean  @default(false)
  endorsementCount  Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill             Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)
  endorsements      SkillEndorsement[]

  @@unique([userId, skillId])
}

// Model for skill endorsements
model SkillEndorsement {
  id                String   @id @default(uuid())
  userSkillId       String
  endorserId        String
  comment           String?
  createdAt         DateTime @default(now())

  // Relations
  userSkill         UserSkill @relation(fields: [userSkillId], references: [id], onDelete: Cascade)
  endorser          User      @relation("EndorserRelation", fields: [endorserId], references: [id], onDelete: Cascade)
}

// Model for user social media links
model UserSocialLink {
  id                String   @id @default(uuid())
  userId            String
  platform          String   // e.g., "facebook", "twitter", "linkedin", "instagram", etc.
  url               String
  username          String?
  isVerified        Boolean  @default(false)
  isPublic          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
}

// Model for portfolio items
model UserDevice {
  id                String   @id @default(uuid())
  userId            String
  deviceType        String   // "mobile", "tablet", "desktop"
  deviceToken       String?
  deviceName        String?
  lastActive        DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Assistant-related models

// Model for storing user's assistant preferences
model AssistantPreference {
  id                String   @id @default(uuid())
  userId            String   @unique
  isEnabled         Boolean  @default(true)
  proactivityLevel  Int      @default(2) // 1-3 scale: 1=minimal, 2=balanced, 3=proactive
  preferredModes    String[] // Array of preferred assistant modes
  dismissedSuggestions String[] // IDs of suggestions user has dismissed
  lastInteraction   DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Model for storing assistant interaction history
model AssistantMemoryLog {
  id                String   @id @default(uuid())
  userId            String
  mode              String   // Current assistant mode when interaction occurred
  interactionType   String   // "suggestion_shown", "suggestion_accepted", "suggestion_dismissed", "manual_query", etc.
  context           Json?    // Context data related to the interaction
  routePath         String?  // Route path where interaction occurred
  createdAt         DateTime @default(now())

  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Model for storing assistant suggestions
model AssistantSuggestion {
  id                String   @id @default(uuid())
  userId            String
  mode              String   // Assistant mode that generated this suggestion
  title             String
  description       String
  customerId        String
  serviceCategoryId String
  status            JobStatus @default(DRAFT)
  latitude          Float
  longitude         Float
  address           String
  city              String
  state             String?
  zipCode           String
  country           String
  scheduledStartTime DateTime?
  scheduledEndTime   DateTime?
  estimatedDuration  Int?      // in minutes
  budgetMin         Decimal?  @db.Decimal(10, 2)
  budgetMax         Decimal?  @db.Decimal(10, 2)
  finalPrice        Decimal?  @db.Decimal(10, 2)
  urgencyLevel      String?   // "low", "medium", "high", "emergency"
  specialistId      String?
  isRemote          Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  completedAt       DateTime?
  cancelledAt       DateTime?
  cancellationReason String?
  aiGeneratedTags   Json?

  // Relations
  customer          User      @relation("CustomerJobs", fields: [customerId], references: [id])
  specialist        User?     @relation("SpecialistJobs", fields: [specialistId], references: [id])
  serviceCategory   ServiceCategory @relation(fields: [serviceCategoryId], references: [id])
  media             JobMedia[]
  proposals         JobProposal[]
  milestones        JobMilestone[]
  messages          Message[]
  reviews           Review[]
  transactions      Transaction[]
  disputes          Dispute[]
}

enum JobStatus {
  DRAFT
  OPEN
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DISPUTED
}

model JobMedia {
  id          String   @id @default(uuid())
  jobId       String
  mediaType   String   // "image", "video", "audio", "document"
  mediaUrl    String
  thumbnailUrl String?
  description String?
  aiAnalysis  Json?
  isBefore    Boolean  @default(true) // Before or after job completion
  createdAt   DateTime @default(now())

  // Relations
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model JobProposal {
  id                String   @id @default(uuid())
  jobId             String
  specialistId      String
  price             Decimal  @db.Decimal(10, 2)
  message           String?
  status            String   // "pending", "accepted", "rejected", "withdrawn"
  estimatedStartTime DateTime?
  estimatedDuration Int?     // in minutes
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  job               Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  specialist        User     @relation(fields: [specialistId], references: [id])
}

model JobMilestone {
  id          String   @id @default(uuid())
  jobId       String
  title       String
  description String?
  amount      Decimal  @db.Decimal(10, 2)
  status      String   // "pending", "completed", "paid"
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model Message {
  id          String   @id @default(uuid())
  jobId       String?
  senderId    String
  recipientId String
  messageType String   // "text", "image", "video", "audio", "location", "system"
  content     String?
  mediaUrl    String?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relations
  job         Job?     @relation(fields: [jobId], references: [id], onDelete: SetNull)
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  recipient   User     @relation("ReceivedMessages", fields: [recipientId], references: [id])
}

model Wallet {
  id        String   @id @default(uuid())
  userId    String   @unique
  balance   Decimal  @default(0) @db.Decimal(10, 2)
  currency  String   @default("USD")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model Transaction {
  id                     String   @id @default(uuid())
  walletId               String
  jobId                  String?
  transactionType        String   // "deposit", "withdrawal", "job_payment", "refund", "platform_fee"
  amount                 Decimal  @db.Decimal(10, 2)
  feeAmount              Decimal  @default(0) @db.Decimal(10, 2)
  status                 String   // "pending", "completed", "failed", "cancelled"
  paymentMethod          String?  // "credit_card", "bank_transfer", "wallet"
  paymentProviderReference String?
  description            String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  completedAt            DateTime?

  // Relations
  wallet                 Wallet   @relation(fields: [walletId], references: [id])
  job                    Job?     @relation(fields: [jobId], references: [id])
}

model Review {
  id                String      @id @default(uuid())
  jobId             String
  reviewerId        String
  revieweeId        String
  overallRating     Int         // Overall star rating (1-5)
  reviewType        ReviewType  @default(POSITIVE) // Classification of review
  
  // Detailed rating criteria
  timingRating      Int?        // Rating for timing/punctuality (1-5)
  satisfactionRating Int?       // Rating for satisfaction with work (1-5)
  costRating        Int?        // Rating for value for money (1-5)
  communicationRating Int?      // Rating for communication quality (1-5)
  
  comment           String?     // Main review text
  response          String?     // Response from reviewee
  helpfulCount      Int         @default(0) // Number of users who found this review helpful
  reportCount       Int         @default(0) // Number of users who reported this review
  isVerifiedPurchase Boolean    @default(true) // Whether reviewer actually used the service
  isPublic          Boolean     @default(true)
  isEdited          Boolean     @default(false)
  editHistory       Json?       // Track changes if review is edited
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  job               Job         @relation(fields: [jobId], references: [id], onDelete: Cascade)
  reviewer          User        @relation("ReviewsGiven", fields: [reviewerId], references: [id])
  reviewee          User        @relation("UserReviews", fields: [revieweeId], references: [id])
  reviewMedia       ReviewMedia[]
}

enum ReviewType {
  POSITIVE
  NEUTRAL
  NEGATIVE
}

model ReviewMedia {
  id        String   @id @default(uuid())
  reviewId  String
  mediaUrl  String
  mediaType String   // "image", "video", etc.
  createdAt DateTime @default(now())
  
  // Relations
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  title     String
  message   String
  data      Json?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Feature-specific Models

model Badge {
  id          String   @id @default(uuid())
  name        String
  description String?
  iconUrl     String?
  criteria    Json?
  category    String?  // "achievement", "certification", "special"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userBadges  UserBadge[]
}

model UserBadge {
  id        String   @id @default(uuid())
  userId    String
  badgeId   String
  awardedAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge     Badge    @relation(fields: [badgeId], references: [id])

  @@unique([userId, badgeId])
}

model Guild {
  id          String   @id @default(uuid())
  name        String
  description String?
  logoUrl     String?
  founderId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  founder     User     @relation(fields: [founderId], references: [id])
  members     GuildMember[]
}

model GuildMember {
  id        String   @id @default(uuid())
  guildId   String
  userId    String
  role      String   // "founder", "admin", "member"
  joinedAt  DateTime @default(now())

  // Relations
  guild     Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([guildId, userId])
}

model Dispute {
  id           String   @id @default(uuid())
  jobId        String
  openedById   String
  reason       String
  status       String   // "open", "under_review", "resolved", "closed"
  resolution   String?
  resolvedById String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  resolvedAt   DateTime?

  // Relations
  job          Job      @relation(fields: [jobId], references: [id])
  openedBy     User     @relation("DisputeOpener", fields: [openedById], references: [id])
  resolvedBy   User?    @relation("DisputeResolver", fields: [resolvedById], references: [id])
  messages     DisputeMessage[]
}

model DisputeMessage {
  id        String   @id @default(uuid())
  disputeId String
  userId    String
  message   String
  attachmentUrl String?
  createdAt DateTime @default(now())

  // Relations
  dispute   Dispute  @relation(fields: [disputeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}

model UserDevice {
  id          String   @id @default(uuid())
  userId      String
  deviceToken String
  deviceType  String   // "ios", "android", "web"
  isActive    Boolean  @default(true)
  lastUsed    DateTime @default(now())
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceToken])
}

model SearchHistory {
  id           String   @id @default(uuid())
  userId       String
  query        String
  filters      Json?
  resultsCount Int?
  createdAt    DateTime @default(now())

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPreference {
  id          String   @id @default(uuid())
  userId      String   @unique
  preferences Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SystemSetting {
  id           String   @id @default(uuid())
  settingKey   String   @unique
  settingValue Json
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
