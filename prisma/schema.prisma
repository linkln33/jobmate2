generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                @id @default(uuid())
  email                   String                @unique
  passwordHash            String
  role                    UserRole              @default(CUSTOMER)
  firstName               String
  lastName                String
  phone                   String?
  profileImageUrl         String?
  dateOfBirth             DateTime?
  bio                     String?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  lastLogin               DateTime?
  isVerified              Boolean               @default(false)
  isActive                Boolean               @default(true)
  emailVerified           Boolean               @default(false)
  phoneVerified           Boolean               @default(false)
  twoFactorEnabled        Boolean               @default(false)
  notificationPreferences Json?
  assistantAnalytics      AssistantAnalytics[]
  assistantMemoryLogs     AssistantMemoryLog[]
  assistantPreference     AssistantPreference?
  assistantSuggestions    AssistantSuggestion[]
  customerProfile         CustomerProfile?
  disputesOpened          Dispute[]             @relation("DisputeOpener")
  disputesResolved        Dispute[]             @relation("DisputeResolver")
  disputeMessages         DisputeMessage[]
  foundedGuilds           Guild[]
  guildMemberships        GuildMember[]
  jobsAsCustomer          Job[]                 @relation("CustomerJobs")
  jobsAsSpecialist        Job[]                 @relation("SpecialistJobs")
  jobProposals            JobProposal[]
  receivedMessages        Message[]             @relation("ReceivedMessages")
  sentMessages            Message[]             @relation("SentMessages")
  notifications           Notification[]
  portfolioItems          PortfolioItem[]
  reviews                 Review[]              @relation("UserReviews")
  reviewsGiven            Review[]              @relation("ReviewsGiven")
  searchHistory           SearchHistory[]
  skillEndorsementsGiven  SkillEndorsement[]    @relation("EndorserRelation")
  specialistProfile       SpecialistProfile?
  badges                  UserBadge[]
  devices                 UserDevice[]
  preferences             UserPreference?
  skills                  UserSkill[]
  socialLinks             UserSocialLink[]
  wallet                  Wallet?
}

model CustomerProfile {
  id                     String   @id @default(uuid())
  userId                 String   @unique
  address                String?
  city                   String?
  state                  String?
  zipCode                String?
  country                String?
  latitude               Float?
  longitude              Float?
  preferredCommunication String?
  savedPaymentMethods    Json?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SpecialistProfile {
  id                       String                    @id @default(uuid())
  userId                   String                    @unique
  businessName             String?
  businessDescription      String?
  yearsOfExperience        Int?
  address                  String?
  city                     String?
  state                    String?
  zipCode                  String?
  country                  String?
  latitude                 Float?
  longitude                Float?
  serviceRadius            Int?
  availabilityStatus       String                    @default("offline")
  hourlyRate               Decimal?                  @db.Decimal(10, 2)
  isFeatured               Boolean                   @default(false)
  averageRating            Decimal?                  @db.Decimal(3, 2)
  totalReviews             Int                       @default(0)
  totalJobsCompleted       Int                       @default(0)
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  acceptsDigitalPayment    Boolean                   @default(true)
  avgDeliveryTime          Int?
  businessLicense          String?
  cancellationRate         Decimal?                  @db.Decimal(5, 2)
  completionRate           Decimal?                  @db.Decimal(5, 2)
  currency                 String                    @default("USD")
  education                Json?
  emergencyAvailable       Boolean                   @default(false)
  insuranceInfo            String?
  isBackgroundChecked      Boolean                   @default(false)
  isIdentityVerified       Boolean                   @default(false)
  isInsuranceVerified      Boolean                   @default(false)
  isLicenseVerified        Boolean                   @default(false)
  isProfileComplete        Boolean                   @default(false)
  languages                String[]
  minimumJobPrice          Decimal?                  @db.Decimal(10, 2)
  positiveReviewPercentage Decimal?                  @db.Decimal(5, 2)
  preferredJobSizes        String[]
  preferredJobTypes        String[]
  responseTime             Int?
  tagline                  String?
  travelWillingness        Boolean                   @default(false)
  workHistory              Json?
  availability             SpecialistAvailability[]
  certifications           SpecialistCertification[]
  locations                SpecialistLocation[]
  user                     User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  services                 SpecialistService[]
}

model SpecialistService {
  id                String            @id @default(uuid())
  specialistId      String
  serviceCategoryId String
  priceType         String
  basePrice         Decimal?          @db.Decimal(10, 2)
  description       String?
  isPrimary         Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  serviceCategory   ServiceCategory   @relation(fields: [serviceCategoryId], references: [id])
  specialist        SpecialistProfile @relation(fields: [specialistId], references: [id], onDelete: Cascade)
}

model SpecialistLocation {
  id           String            @id @default(uuid())
  specialistId String
  latitude     Float
  longitude    Float
  status       String
  heading      Float?
  accuracy     Float?
  createdAt    DateTime          @default(now())
  specialist   SpecialistProfile @relation(fields: [specialistId], references: [id], onDelete: Cascade)
}

model SpecialistAvailability {
  id           String            @id @default(uuid())
  specialistId String
  dayOfWeek    Int
  startTime    String
  endTime      String
  isAvailable  Boolean           @default(true)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  specialist   SpecialistProfile @relation(fields: [specialistId], references: [id], onDelete: Cascade)
}

model SpecialistCertification {
  id                  String            @id @default(uuid())
  specialistId        String
  certificationName   String
  issuingOrganization String
  issueDate           DateTime
  expiryDate          DateTime?
  verificationStatus  String
  certificateUrl      String?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  specialist          SpecialistProfile @relation(fields: [specialistId], references: [id], onDelete: Cascade)
}

model ServiceCategory {
  id                 String              @id @default(cuid())
  name               String
  description        String?
  iconUrl            String?
  parentCategoryId   String?
  isActive           Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  color              String?
  coverImageUrl      String?
  displayOrder       Int                 @default(0)
  emoji              String?
  isPopular          Boolean             @default(false)
  metaTags           String[]
  slug               String?             @unique
  jobs               Job[]
  portfolioItems     PortfolioItem[]
  parentCategory     ServiceCategory?    @relation("CategoryHierarchy", fields: [parentCategoryId], references: [id])
  childCategories    ServiceCategory[]   @relation("CategoryHierarchy")
  skills             Skill[]
  specialistServices SpecialistService[]
}

model Skill {
  id                String           @id @default(uuid())
  name              String
  description       String?
  iconUrl           String?
  serviceCategoryId String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  serviceCategory   ServiceCategory? @relation(fields: [serviceCategoryId], references: [id])
  userSkills        UserSkill[]
}

model UserSkill {
  id               String             @id @default(uuid())
  userId           String
  skillId          String
  proficiencyLevel Int?               @default(1)
  yearsExperience  Decimal?           @db.Decimal(4, 1)
  isVerified       Boolean            @default(false)
  endorsementCount Int                @default(0)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  endorsements     SkillEndorsement[]
  skill            Skill              @relation(fields: [skillId], references: [id], onDelete: Cascade)
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, skillId])
}

model SkillEndorsement {
  id          String    @id @default(uuid())
  userSkillId String
  endorserId  String
  comment     String?
  createdAt   DateTime  @default(now())
  endorser    User      @relation("EndorserRelation", fields: [endorserId], references: [id], onDelete: Cascade)
  userSkill   UserSkill @relation(fields: [userSkillId], references: [id], onDelete: Cascade)
}

model UserSocialLink {
  id         String   @id @default(uuid())
  userId     String
  platform   String
  url        String
  username   String?
  isVerified Boolean  @default(false)
  isPublic   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, platform])
}

model PortfolioItem {
  id                String           @id @default(uuid())
  userId            String
  title             String
  description       String?
  mediaUrls         String[]
  serviceCategoryId String?
  isPublic          Boolean          @default(true)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  serviceCategory   ServiceCategory? @relation(fields: [serviceCategoryId], references: [id])
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserDevice {
  id          String   @id @default(uuid())
  userId      String
  deviceToken String?
  deviceType  String
  createdAt   DateTime @default(now())
  deviceName  String?
  lastActive  DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AssistantPreference {
  id                   String    @id @default(uuid())
  userId               String    @unique
  isEnabled            Boolean   @default(true)
  proactivityLevel     Int       @default(2)
  preferredModes       String[]
  dismissedSuggestions String[]
  lastInteraction      DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AssistantMemoryLog {
  id              String   @id @default(uuid())
  userId          String
  mode            String
  interactionType String
  context         Json?
  routePath       String?
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AssistantSuggestion {
  id            String    @id @default(uuid())
  userId        String
  mode          String
  title         String
  description   String
  actionType    String?
  actionPayload Json?
  priority      Int       @default(2)
  status        String    @default("pending")
  expiresAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AssistantAnalytics {
  id                   String   @id @default(uuid())
  userId               String
  date                 DateTime @default(now())
  totalInteractions    Int      @default(0)
  suggestionsShown     Int      @default(0)
  suggestionsAccepted  Int      @default(0)
  suggestionsDismissed Int      @default(0)
  manualQueries        Int      @default(0)
  modeChanges          Int      @default(0)
  timeSpentSeconds     Int      @default(0)
  mostUsedMode         String?
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
}

model Job {
  id                 String          @id @default(uuid())
  title              String
  description        String
  customerId         String
  serviceCategoryId  String
  status             JobStatus       @default(DRAFT)
  latitude           Float
  longitude          Float
  address            String
  city               String
  state              String?
  zipCode            String
  country            String
  scheduledStartTime DateTime?
  scheduledEndTime   DateTime?
  estimatedDuration  Int?
  budgetMin          Decimal?        @db.Decimal(10, 2)
  budgetMax          Decimal?        @db.Decimal(10, 2)
  finalPrice         Decimal?        @db.Decimal(10, 2)
  urgencyLevel       String?
  specialistId       String?
  isRemote           Boolean         @default(false)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  completedAt        DateTime?
  cancelledAt        DateTime?
  cancellationReason String?
  aiGeneratedTags    Json?
  disputes           Dispute[]
  customer           User            @relation("CustomerJobs", fields: [customerId], references: [id])
  serviceCategory    ServiceCategory @relation(fields: [serviceCategoryId], references: [id])
  specialist         User?           @relation("SpecialistJobs", fields: [specialistId], references: [id])
  media              JobMedia[]
  milestones         JobMilestone[]
  proposals          JobProposal[]
  messages           Message[]
  reviews            Review[]
  transactions       Transaction[]
}

model JobMedia {
  id           String   @id @default(uuid())
  jobId        String
  mediaType    String
  mediaUrl     String
  thumbnailUrl String?
  description  String?
  aiAnalysis   Json?
  isBefore     Boolean  @default(true)
  createdAt    DateTime @default(now())
  job          Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model JobProposal {
  id                 String    @id @default(uuid())
  jobId              String
  specialistId       String
  price              Decimal   @db.Decimal(10, 2)
  message            String?
  status             String
  estimatedStartTime DateTime?
  estimatedDuration  Int?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  job                Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  specialist         User      @relation(fields: [specialistId], references: [id])
}

model JobMilestone {
  id          String    @id @default(uuid())
  jobId       String
  title       String
  description String?
  amount      Decimal   @db.Decimal(10, 2)
  status      String
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  job         Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model Message {
  id          String   @id @default(uuid())
  jobId       String?
  senderId    String
  recipientId String
  messageType String
  content     String?
  mediaUrl    String?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  job         Job?     @relation(fields: [jobId], references: [id])
  recipient   User     @relation("ReceivedMessages", fields: [recipientId], references: [id])
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
}

model Wallet {
  id           String        @id @default(uuid())
  userId       String        @unique
  balance      Decimal       @default(0) @db.Decimal(10, 2)
  currency     String        @default("USD")
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id                       String    @id @default(uuid())
  walletId                 String
  jobId                    String?
  transactionType          String
  amount                   Decimal   @db.Decimal(10, 2)
  feeAmount                Decimal   @default(0) @db.Decimal(10, 2)
  status                   String
  paymentMethod            String?
  paymentProviderReference String?
  description              String?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  completedAt              DateTime?
  job                      Job?      @relation(fields: [jobId], references: [id])
  wallet                   Wallet    @relation(fields: [walletId], references: [id])
}

model Review {
  id                  String        @id @default(uuid())
  jobId               String
  reviewerId          String
  revieweeId          String
  comment             String?
  response            String?
  isPublic            Boolean       @default(true)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  communicationRating Int?
  costRating          Int?
  editHistory         Json?
  helpfulCount        Int           @default(0)
  isEdited            Boolean       @default(false)
  isVerifiedPurchase  Boolean       @default(true)
  overallRating       Int
  reportCount         Int           @default(0)
  reviewType          ReviewType    @default(POSITIVE)
  satisfactionRating  Int?
  timingRating        Int?
  job                 Job           @relation(fields: [jobId], references: [id], onDelete: Cascade)
  reviewee            User          @relation("UserReviews", fields: [revieweeId], references: [id])
  reviewer            User          @relation("ReviewsGiven", fields: [reviewerId], references: [id])
  reviewMedia         ReviewMedia[]
}

model ReviewMedia {
  id        String   @id @default(uuid())
  reviewId  String
  mediaUrl  String
  mediaType String
  createdAt DateTime @default(now())
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  title     String
  message   String
  data      Json?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Badge {
  id          String      @id @default(uuid())
  name        String
  description String?
  iconUrl     String?
  criteria    Json?
  category    String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userBadges  UserBadge[]
}

model UserBadge {
  id        String   @id @default(uuid())
  userId    String
  badgeId   String
  awardedAt DateTime @default(now())
  badge     Badge    @relation(fields: [badgeId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
}

model Guild {
  id          String        @id @default(uuid())
  name        String
  description String?
  logoUrl     String?
  founderId   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  founder     User          @relation(fields: [founderId], references: [id])
  members     GuildMember[]
}

model GuildMember {
  id       String   @id @default(uuid())
  guildId  String
  userId   String
  role     String
  joinedAt DateTime @default(now())
  guild    Guild    @relation(fields: [guildId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([guildId, userId])
}

model Dispute {
  id           String           @id @default(uuid())
  jobId        String
  openedById   String
  reason       String
  status       String
  resolution   String?
  resolvedById String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  resolvedAt   DateTime?
  job          Job              @relation(fields: [jobId], references: [id])
  openedBy     User             @relation("DisputeOpener", fields: [openedById], references: [id])
  resolvedBy   User?            @relation("DisputeResolver", fields: [resolvedById], references: [id])
  messages     DisputeMessage[]
}

model DisputeMessage {
  id            String   @id @default(uuid())
  disputeId     String
  userId        String
  message       String
  attachmentUrl String?
  createdAt     DateTime @default(now())
  dispute       Dispute  @relation(fields: [disputeId], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [userId], references: [id])
}

model SearchHistory {
  id           String   @id @default(uuid())
  userId       String
  query        String
  filters      Json?
  resultsCount Int?
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPreference {
  id          String   @id @default(uuid())
  userId      String   @unique
  preferences Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SystemSetting {
  id           String   @id @default(uuid())
  settingKey   String   @unique
  settingValue Json
  description  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum UserRole {
  CUSTOMER
  SPECIALIST
  ADMIN
}

enum JobStatus {
  DRAFT
  OPEN
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DISPUTED
}

enum ReviewType {
  POSITIVE
  NEUTRAL
  NEGATIVE
}
